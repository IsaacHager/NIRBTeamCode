//NIRB Team main drive program -- Mecanum Drive; Pivot Arm; Vertical Griper

//Imports

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp

public class MecanumDrive extends LinearOpMode {

    /*
    Declaring all of the hardware
    */
    private DcMotor backLeft;
    private DcMotor frontLeft;
    private DcMotor backRight;
    private DcMotor frontRight;
    private DcMotor pivotMotor;
    private Servo clawServo;
    
    /*
    Declaring all of the Contoller inputs
    */
    
    float leftStickY;
    float leftStickX;
    float rightStickY;
    float rightStickX;
    float rightBumper;
    float leftBumper;
    
    double motorSpeed = 0.5; //Controlls the speed of the motors throughout the program
   
    public void mecanum() { //Function resposible for controlling drive motors
        
        /*
        Correlating declared variable names to controller inputs
        */
        
        leftStickY = -gamepad1.left_stick_y;
        leftStickX = gamepad1.left_stick_x;
        rightStickY = gamepad1.right_stick_y;
        rightStickX = gamepad1.right_stick_x;
        rightBumper = (gamepad1.right_bumper) ? 1 : 0;
        leftBumper = (gamepad1.left_bumper) ? 1 : 0;
        
        /*
        Bolean logic for the mecanum drive
        */
        
        backLeft.setPower((leftStickY - leftStickX + rightStickX) * motorSpeed);
        frontLeft.setPower((leftStickY + leftStickX + rightStickX) * motorSpeed);
        backRight.setPower((leftStickY + leftStickX - rightStickX) * motorSpeed);
        frontRight.setPower((leftStickY - leftStickX - rightStickX) * motorSpeed);
        
        pivotMotor.setPower(rightStickY * motorSpeed); //Moves arm according to the stick (should use encoder)
        
   }
   
   @Override
    public void runOpMode() {
        
        /*
        Correlating declared variable names to established control hub setups
        */
        
        backLeft = hardwareMap.get(DcMotor.class, "backLeft");
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
        backRight = hardwareMap.get(DcMotor.class, "backRight");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        
        /*
        Reverse motors
        */
        
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        pivotMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        /*
        Set brake behavior
        */
        
        telemetry.addData("is active", opModeIsActive());
        telemetry.update();
        waitForStart();
        while(opModeIsActive()) { //While initialized...
            motorSpeed = 1 - (9 * gamepad1.left_trigger / 10); //Set motor speed
            mecanum(); //Call function to update drive inputs
        }
    }
}
